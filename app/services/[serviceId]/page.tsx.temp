'use client';

import React, { useEffect, useState } from 'react';
import { Button } from '@/components/ui/button';
import { useUser } from '@clerk/nextjs';
import ReviewForm from '@/components/review-form';
import { ReviewCard } from '@/components/vendor/Review-Card2';
import Image from 'next/image';
import Link from 'next/link';
import { useParams } from 'next/navigation';

interface Review {
  _id: string;
  rating: number;
  comment: string;
  createdAt: string;
  userId: string;
  userName: string;
  userImage?: string;
}

interface Service {
  _id: string;
  name: string;
  description: string;
  price: number;
  images: string[];
  features: string[];
  isActive: boolean;
  vendor: {
    _id: string;
    name: string;
    image?: string;
  };
  category: string;
}

export default function ServiceDetailPage() {
  // Get route params and auth
  const params = useParams();
  const { serviceId } = params;
  const { isSignedIn, user: currentUser } = useUser();

  // State declarations
  const [service, setService] = useState<Service | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showAllImages, setShowAllImages] = useState(false);
  const [reviews, setReviews] = useState<Review[]>([]);
  const [loadingReviews, setLoadingReviews] = useState(true);

  // Derived state
  const mainImage = service?.images?.[0] || '/placeholder.jpg';
  const sideImages = service?.images?.slice(1) || [];
  const hasMoreImages = sideImages.length > (showAllImages ? sideImages.length : 3);

  // Fetch service details
  useEffect(() => {
    const fetchServiceDetails = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/services/${serviceId}`);
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.error || 'Failed to fetch service details');
        }
        
        setService(data);
      } catch (err) {
        console.error('Error fetching service:', err);
        setError(err instanceof Error ? err.message : 'Failed to load service details');
      } finally {
        setLoading(false);
      }
    };

    if (serviceId) {
      fetchServiceDetails();
    }
  }, [serviceId]);

  // Fetch reviews
  useEffect(() => {
    const fetchReviews = async () => {
      if (!serviceId) return;
      
      setLoadingReviews(true);
      try {
        const res = await fetch(`/api/review?targetType=service&targetId=${serviceId}`);
        if (!res.ok) {
          throw new Error('Failed to fetch reviews');
        }
        const data = await res.json();
        setReviews(
          (data.reviews || []).map((review: Review) => ({
            ...review,
            date: review.createdAt ? new Date(review.createdAt).toLocaleDateString() : undefined,
          }))
        );
      } catch (error) {
        console.error('Error fetching reviews:', error);
      } finally {
        setLoadingReviews(false);
      }
    };
    
    fetchReviews();
  }, [serviceId]);

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[400px]">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-pink-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-10">
        <h2 className="text-2xl font-semibold text-gray-900 mb-2">Error</h2>
        <p className="text-gray-600">{error}</p>
      </div>
    );
  }

  if (!service) {
    return null;
  }

  return (
    <div className="max-w-6xl mx-auto py-10 px-4">
      <div className="mb-6">
        <h1 className="text-3xl md:text-4xl font-extrabold mb-2 text-gray-900">{service.name}</h1>
        
        {/* Service Rating Summary */}
        {reviews && reviews.length > 0 && (
          <div className="flex items-center gap-4 mb-4">
            <div className="flex items-center gap-2">
              <div className="flex items-center">
                {Array.from({ length: 5 }).map((_, i) => {
                  const averageRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length;
                  return (
                    <svg
                      key={i}
                      className={`w-5 h-5 ${
                        i < Math.round(averageRating)
                          ? 'text-pink-500 fill-current'
                          : 'text-gray-300'
                      }`}
                      viewBox="0 0 20 20"
                    >
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                  );
                })}
              </div>
              <span className="text-lg font-semibold text-gray-900">
                {(reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length).toFixed(1)}
              </span>
              <span className="text-gray-600">({reviews.length} reviews)</span>
            </div>
          </div>
        )}

        {/* Images Section */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <div className="md:col-span-3">
            <Image
              src={mainImage}
              alt={service.name}
              width={800}
              height={500}
              className="w-full h-auto rounded-lg shadow-md"
            />
          </div>
          <div className="grid grid-cols-2 md:grid-cols-1 gap-4">
            {sideImages.slice(0, showAllImages ? undefined : 3).map((image, index) => (
              <div key={index} className="relative aspect-[4/3]">
                <Image
                  src={image}
                  alt={`${service.name} ${index + 2}`}
                  fill
                  className="object-cover rounded-lg shadow-md"
                />
                {hasMoreImages && index === (showAllImages ? sideImages.length - 1 : 2) && !showAllImages && (
                  <button
                    onClick={() => setShowAllImages(true)}
                    className="absolute inset-0 bg-black bg-opacity-50 text-white flex items-center justify-center rounded-lg"
                  >
                    +{sideImages.length - 3} more
                  </button>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Service Details */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div className="md:col-span-2">
            <div className="flex flex-wrap gap-3 items-center mb-4">
              <span className="font-bold text-small text-gray-500">by {service.vendor.name}</span>
              <span className="text-pink-600 font-bold text-xl">â‚¹{service.price}</span>
              <span className="bg-gray-100 text-gray-700 px-2 py-0.5 rounded text-sm font-semibold">{service.category}</span>
            </div>
            <p className="text-gray-700 text-lg mb-6">{service.description}</p>
            
            {/* Features */}
            {service.features && service.features.length > 0 && (
              <div className="mb-8">
                <h3 className="text-xl font-bold mb-4">Features & Inclusions</h3>
                <ul className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {service.features.map((feature, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <svg
                        className="w-5 h-5 text-green-500"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M5 13l4 4L19 7"
                        />
                      </svg>
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            {/* Reviews Section */}
            <div className="mt-8">
              <h3 className="text-xl font-bold mb-4">Reviews</h3>
              {loadingReviews ? (
                <div className="flex justify-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-pink-500"></div>
                </div>
              ) : reviews.length > 0 ? (
                <div className="space-y-4">
                  {reviews.map((review) => (
                    <ReviewCard key={review._id} review={review} />
                  ))}
                </div>
              ) : (
                <p className="text-gray-600">No reviews yet.</p>
              )}
              
              {/* Add Review Form */}
              {isSignedIn && (
                <div className="mt-8">
                  <ReviewForm
                    targetId={service._id}
                    targetType="service"
                    onReviewAdded={(newReview) => {
                      setReviews((prev) => [...prev, newReview]);
                    }}
                  />
                </div>
              )}
            </div>
          </div>
          
          {/* Booking Section */}
          <div className="bg-white p-6 rounded-lg shadow-lg h-fit sticky top-24">
            <h3 className="text-xl font-bold mb-4">Book this service</h3>
            {isSignedIn ? (
              <Button className="w-full" variant="default">
                Book Now
              </Button>
            ) : (
              <Link href="/login" className="block">
                <Button className="w-full" variant="default">
                  Login to Book
                </Button>
              </Link>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
