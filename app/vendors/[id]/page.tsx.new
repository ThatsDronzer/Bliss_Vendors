"use client"

import Image from "next/image"
import Link from "next/link"
import { MapPin, Phone, Mail, Calendar, Star, MapIcon, Heart, ShoppingCart } from "lucide-react"
import { useRouter, useParams } from "next/navigation"
import { useState, useEffect } from "react"

import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { vendors } from "@/lib/data"
import { useAuth, useUser } from "@clerk/nextjs"
import { useBooking } from "@/hooks/use-booking"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Calendar as CalendarComponent } from "@/components/ui/calendar"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { toast } from "@/components/ui/use-toast"
import { ToastAction } from "@/components/ui/toast"
import { ServiceCard } from '@/components/vendor/ServiceCard'
import { ReviewCard } from '@/components/vendor/ReviewCard'
import { SelectedServicesSummary } from '@/components/vendor/SelectedServicesSummary'
import { ImageGallery } from '@/components/vendor/ImageGallery'
import { useServiceSelection } from '@/hooks/useServiceSelection'
import { mockVendorData, type VendorDetails } from '@/lib/types/vendor'
import { PlaceholderImage } from '@/components/vendor/PlaceholderImage'
import { PaymentGateway } from "@/components/payment-gateway"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ServiceBooking } from "@/components/home-service/ServiceBooking"

export default function VendorDetailsPage() {
  const router = useRouter()
  const params = useParams()
  const vendorId = params?.id as string
  const { isAuthenticated, user, favorites, toggleFavorite } = useAuth()
  const { handleBookingSubmission, isProcessing } = useBooking()
  const [vendor, setVendor] = useState<VendorDetails>(mockVendorData)
  const [loading, setLoading] = useState(true)
  const [bookingOpen, setBookingOpen] = useState(false)
  const [date, setDate] = useState<Date | undefined>(undefined)
  const [name, setName] = useState("")
  const [phone, setPhone] = useState("")
  const [email, setEmail] = useState("")
  const [notes, setNotes] = useState("")
  const [selectedPackage, setSelectedPackage] = useState<string>("")
  const [isFavorite, setIsFavorite] = useState(false)
  const [showPayment, setShowPayment] = useState(false)
  const [bookingData, setBookingData] = useState<any>(null)
  const [selectedServices, setSelectedServices] = useState<string[]>([])
  const [showBooking, setShowBooking] = useState(false)

  const { totalPrice, toggleService, isServiceSelected } = useServiceSelection()

  useEffect(() => {
    if (!vendorId) {
      toast({
        title: "Invalid Vendor ID",
        description: "No vendor ID was provided.",
        variant: "destructive",
      })
      router.push('/vendors')
      return
    }

    // Find the vendor from the actual vendors data
    const foundVendor = vendors.find(v => v.id === vendorId)
    
    if (foundVendor) {
      // Transform the vendor data to match VendorDetails type
      const items = foundVendor.items || [];
      const servicesArr = foundVendor.services || [];
      const mappedServices = items.length > 0
        ? items.map((item, index) => ({
            id: index + 1,
            name: item.name,
            price: parseInt(item.price.replace(/[^\d]/g, '')),
            description: 'details' in item ? item.details : item.capacity || '',
            duration: 'duration' in item ? item.duration : '',
            availability: 'availability' in item ? item.availability : ''
          }))
        : servicesArr.map((service, index) => ({
            id: service.id || index + 1,
            name: service.name,
            price: service.price,
            description: service.description || '',
            duration: service.duration || '',
            availability: service.availability || ''
          }));
      const vendorDetails: VendorDetails = {
        id: foundVendor.id,
        name: foundVendor.name,
        location: foundVendor.location,
        rating: foundVendor.rating,
        category: foundVendor.category || '',
        coverImage: foundVendor.image,
        description: foundVendor.description,
        shortDescription: foundVendor.description?.split('.')[0] || '',
        services: mappedServices,
        gallery: foundVendor.gallery || [foundVendor.image],
        reviews: foundVendor.reviews || [],
        availability: foundVendor.availability || [],
        refundPolicy: foundVendor.refundPolicy || { description: '', cancellationTerms: [] },
        contact: foundVendor.contact || { phone: foundVendor.phone || '', email: foundVendor.email || '', whatsapp: '' },
        socialLinks: foundVendor.socialLinks || {},
        businessHours: foundVendor.businessHours || ''
      }
      setVendor(vendorDetails)
    } else {
      // Handle vendor not found
      toast({
        title: "Vendor Not Found",
        description: "The requested vendor could not be found.",
        variant: "destructive",
      })
      router.push('/vendors')
    }
    setLoading(false)

    // Clear selected services when leaving the page
    return () => {
      if (typeof window !== 'undefined') {
        sessionStorage.removeItem('selectedServices');
      }
    };
  }, [vendorId, router])

  // Clear selected services when leaving the page
  useEffect(() => {
    return () => {
      if (typeof window !== 'undefined') {
        sessionStorage.removeItem('selectedServices');
      }
    };
  }, []);

  // Check if vendor is in favorites
  useEffect(() => {
    if (vendor && favorites) {
      setIsFavorite(favorites.some((fav) => fav.id === vendor.id))
    }
  }, [vendor, favorites])

  const handleBookNow = (packageName?: string) => {
    if (packageName) {
      setSelectedPackage(packageName)
    }
    setBookingOpen(true)
  }

  const handleBookingSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!isAuthenticated) {
      toast({
        title: "Authentication Required",
        description: "Please log in to book services.",
        variant: "destructive",
      })
      return
    }

    if (!date) {
      toast({
        title: "Date Required",
        description: "Please select a booking date.",
        variant: "destructive",
      })
      return
    }

    if (selectedServices.length === 0) {
      toast({
        title: "Services Required",
        description: "Please select at least one service to book.",
        variant: "destructive",
      })
      return
    }

    if (!name || !phone || !email) {
      toast({
        title: "Missing Information",
        description: "Please fill in all required fields.",
        variant: "destructive",
      })
      return
    }

    try {
      // Create a new booking ID
      const bookingId = `booking-${Date.now()}`
      
      // Format the booking data
      const newBookingData = {
        id: bookingId,
        vendorId: vendor.id,
        vendorName: vendor.name,
        vendorCategory: vendor.category,
        bookingDate: date.toISOString().split('T')[0],
        status: "Pending",
        amount: totalPrice,
        paymentStatus: "Pending",
        image: vendor.coverImage,
        clientName: name,
        clientPhone: phone,
        clientEmail: email,
        eventDetails: `Booking for ${selectedServices.map(s => s.name).join(", ")}`,
        notes: notes,
        createdAt: new Date().toISOString(),
        guestCount: 0
      }

      // Submit the booking using the updated hook
      const success = await handleBookingSubmission(newBookingData)

      if (success) {
        setBookingData(newBookingData)
        setShowPayment(true)
      }
    } catch (error) {
      console.error('Error submitting booking:', error)
      toast({
        title: "Booking Failed",
        description: "There was an error submitting your booking. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handlePaymentSuccess = () => {
    setShowPayment(false)
    setBookingOpen(false)
    toast({
      title: "Booking Confirmed!",
      description: "Your booking has been confirmed. Check your email for details.",
    })
    router.push('/dashboard/bookings')
  }

  const handlePaymentCancel = () => {
    setShowPayment(false)
  }

  const handleToggleFavorite = () => {
    if (!isAuthenticated) {
      toast({
        title: "Authentication Required",
        description: "Please log in to add vendors to favorites.",
        variant: "destructive",
        action: (
          <ToastAction altText="Login" onClick={() => router.push('/login')}>
            Login
          </ToastAction>
        ),
      })
      return
    }

    toggleFavorite(vendor)
    setIsFavorite(!isFavorite)
  }

  const handleProceedToBook = () => {
    if (!isAuthenticated) {
      toast({
        title: "Authentication Required",
        description: "Please log in to book services.",
        variant: "destructive",
        action: (
          <ToastAction altText="Login" onClick={() => router.push('/login')}>
            Login
          </ToastAction>
        ),
      })
      return
    }
    setShowBooking(true)
  }

  const handleServiceSelect = (serviceId: string) => {
    toggleService(serviceId)
  }

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="animate-pulse">
          <div className="h-64 bg-gray-200 rounded-lg mb-8"></div>
          <div className="space-y-4">
            <div className="h-8 bg-gray-200 rounded w-1/4"></div>
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            <div className="h-4 bg-gray-200 rounded w-2/3"></div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <div className="relative h-[400px] w-full">
        <Image
          src={vendor.coverImage}
          alt={vendor.name}
          fill
          className="object-cover"
          priority
        />
        <div className="absolute inset-0 bg-black bg-opacity-40">
          <div className="container mx-auto px-4 h-full flex items-end pb-8">
            <div className="text-white">
              <h1 className="text-4xl font-bold mb-2">{vendor.name}</h1>
              <div className="flex items-center gap-4 text-sm mb-2">
                <span className="flex items-center gap-1">
                  <MapPin className="h-4 w-4" />
                  {vendor.location}
                </span>
                <span className="flex items-center gap-1">
                  <Star className="h-4 w-4 text-yellow-400" />
                  {vendor.rating} Rating
                </span>
                <span className="flex items-center gap-1">
                  <Badge variant="secondary">{vendor.category}</Badge>
                </span>
              </div>
              {/* Short Description */}
              <p className="text-lg text-gray-200 max-w-2xl mb-4">{vendor.shortDescription}</p>
              {/* Contact & Social Section */}
              <div className="flex flex-wrap items-center gap-4 mt-2">
                <a href={`tel:${vendor.contact.phone}`} className="hover:underline flex items-center gap-1 text-white/90"><Phone className="h-5 w-5" />Call</a>
                <a href={`mailto:${vendor.contact.email}`} className="hover:underline flex items-center gap-1 text-white/90"><Mail className="h-5 w-5" />Email</a>
                <a href={vendor.contact.whatsapp} target="_blank" rel="noopener noreferrer" className="hover:underline flex items-center gap-1 text-white/90"><svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24"><path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.472-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.149-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.372-.025-.521-.075-.148-.669-1.611-.916-2.206-.242-.579-.487-.5-.669-.51-.173-.008-.372-.01-.571-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.099 3.2 5.077 4.363.709.244 1.262.389 1.694.497.712.181 1.36.156 1.872.095.571-.067 1.758-.719 2.006-1.413.248-.694.248-1.288.173-1.413-.074-.124-.272-.198-.57-.347zm-5.421 7.617h-.001a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.999-3.648-.235-.374A9.86 9.86 0 012.1 12.045C2.111 6.479 6.58 2.01 12.149 2c2.671.004 5.181 1.043 7.072 2.936a9.935 9.935 0 012.929 7.066c-.011 5.566-4.48 10.035-10.057 10.035zm8.413-18.412A11.815 11.815 0 0012.148 0C5.452.011.062 5.4.05 12.093c.003 2.13.557 4.21 1.617 6.037L.057 24l6.063-1.604a11.88 11.88 0 005.429 1.381h.005c6.697 0 12.087-5.389 12.099-12.083a11.82 11.82 0 00-3.468-8.464z"/></svg>WhatsApp</a>
                {vendor.socialLinks.facebook && (
                  <a href={vendor.socialLinks.facebook} target="_blank" rel="noopener noreferrer" className="hover:underline flex items-center gap-1 text-white/90"><svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24"><path d="M22.675 0h-21.35C.595 0 0 .592 0 1.326v21.348C0 23.408.595 24 1.325 24h11.495v-9.294H9.691v-3.622h3.129V8.413c0-3.1 1.893-4.788 4.659-4.788 1.325 0 2.463.099 2.797.143v3.24l-1.918.001c-1.504 0-1.797.715-1.797 1.763v2.313h3.587l-.467 3.622h-3.12V24h6.116C23.406 24 24 23.408 24 22.674V1.326C24 .592 23.406 0 22.675 0"/></svg>Facebook</a>
                )}
                {vendor.socialLinks.instagram && (
                  <a href={vendor.socialLinks.instagram} target="_blank" rel="noopener noreferrer" className="hover:underline flex items-center gap-1 text-white/90"><svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2.163c3.204 0 3.584.012 4.85.07 1.366.062 2.633.334 3.608 1.308.974.974 1.246 2.242 1.308 3.608.058 1.266.069 1.646.069 4.85s-.012 3.584-.07 4.85c-.062 1.366-.334 2.633-1.308 3.608-.974.974-2.242 1.246-3.608 1.308-1.266.058-1.646.069-4.85.069s-3.584-.012-4.85-.07c-1.366-.062-2.633-.334-3.608-1.308-.974-.974-1.246-2.242-1.308-3.608C2.175 15.647 2.163 15.267 2.163 12s.012-3.584.07-4.85c.062-1.366.334-2.633 1.308-3.608C4.515 2.497 5.783 2.225 7.149 2.163 8.415 2.105 8.795 2.163 12 2.163zm0-2.163C8.741 0 8.332.012 7.052.07 5.771.128 4.659.334 3.678 1.315c-.98.98-1.187 2.092-1.245 3.373C2.012 5.668 2 6.077 2 12c0 5.923.012 6.332.07 7.612.058 1.281.265 2.393 1.245 3.373.98.98 2.092 1.187 3.373 1.245C8.332 23.988 8.741 24 12 24s3.668-.012 4.948-.07c1.281-.058 2.393-.265 3.373-1.245.98-.98 1.187-2.092 1.245-3.373.058-1.28.07-1.689.07-7.612 0-5.923-.012-6.332-.07-7.612-.058-1.281-.265-2.393-1.245-3.373-.98-.98-2.092-1.187-3.373-1.245C15.668.012 15.259 0 12 0zm0 5.838a6.162 6.162 0 100 12.324 6.162 6.162 0 000-12.324zm0 10.162a3.999 3.999 0 110-7.998 3.999 3.999 0 010 7.998zm6.406-11.845a1.44 1.44 0 11-2.88 0 1.44 1.44 0 012.88 0z"/></svg>Instagram</a>
                )}
                {vendor.socialLinks.website && (
                  <a href={vendor.socialLinks.website} target="_blank" rel="noopener noreferrer" className="hover:underline flex items-center gap-1 text-white/90"><svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2zm0 18c-4.411 0-8-3.589-8-8 0-4.411 3.589-8 8-8 4.411 0 8 3.589 8 8 0 4.411-3.589 8-8 8zm0-14c-3.309 0-6 2.691-6 6 0 3.309 2.691 6 6 6 3.309 0 6-2.691 6-6 0-3.309-2.691-6-6-6z"/></svg>Website</a>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Left Column - Vendor Details */}
          <div className="flex-1">
            <Tabs defaultValue="services" className="w-full">
              <TabsList className="mb-4">
                <TabsTrigger value="services">Services</TabsTrigger>
                <TabsTrigger value="about">About</TabsTrigger>
                <TabsTrigger value="gallery">Gallery</TabsTrigger>
                <TabsTrigger value="reviews">Reviews</TabsTrigger>
              </TabsList>

              <TabsContent value="services" className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {vendor.services.map((service) => (
                    <ServiceCard
                      key={service.id}
                      service={service}
                      isSelected={isServiceSelected(service.id.toString())}
                      onSelect={() => handleServiceSelect(service.id.toString())}
                      // Pass duration/availability if present
                      duration={service.duration}
                      availability={service.availability}
                    />
                  ))}
                </div>
              </TabsContent>

              <TabsContent value="about">
                <Card>
                  <CardContent className="pt-6">
                    <div className="space-y-6">
                      <div>
                        <h3 className="font-semibold mb-2">About {vendor.name}</h3>
                        <p className="text-gray-600">{vendor.description}</p>
                      </div>
                      <div>
                        <h3 className="font-semibold mb-2">Business Hours</h3>
                        <p className="text-gray-600">{vendor.businessHours}</p>
                      </div>
                      <div>
                        <h3 className="font-semibold mb-2">Availability</h3>
                        <p className="text-gray-600">{vendor.availability && vendor.availability.length > 0 ? 'Available on select dates. Advance booking required.' : 'Contact for availability.'}</p>
                      </div>
                      <div>
                        <h3 className="font-semibold mb-2">Refund Policy</h3>
                        <p className="text-gray-600">{typeof vendor.refundPolicy === 'string' ? vendor.refundPolicy : vendor.refundPolicy.description}</p>
                      </div>
                      <div>
                        <h3 className="font-semibold mb-2">Contact Information</h3>
                        <div className="space-y-2 text-gray-600">
                          <p className="flex items-center gap-2">
                            <Phone className="h-4 w-4" />
                            {vendor.contact.phone}
                          </p>
                          <p className="flex items-center gap-2">
                            <Mail className="h-4 w-4" />
                            {vendor.contact.email}
                          </p>
                          <p className="flex items-center gap-2">
                            <MapIcon className="h-4 w-4" />
                            {vendor.location}
                          </p>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="gallery">
                <ImageGallery images={vendor.gallery} />
              </TabsContent>

              <TabsContent value="reviews">
                {/* Ratings Summary */}
                <div className="flex items-center gap-2 mb-4">
                  <Star className="h-5 w-5 text-yellow-400" />
                  <span className="text-lg font-semibold">{vendor.rating}</span>
                  <span className="text-gray-500">({vendor.reviews.length} reviews)</span>
                </div>
                <div className="space-y-4">
                  {vendor.reviews.length > 0 ? (
                    vendor.reviews.map((review, index) => (
                      <ReviewCard key={index} review={review} />
                    ))
                  ) : (
                    <p className="text-center text-gray-500 py-8">No reviews yet</p>
                  )}
                </div>
              </TabsContent>
            </Tabs>
          </div>

          {/* Right Column - Booking Summary */}
          <div className="lg:w-1/3">
            <div className="sticky top-4 space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Selected Services</CardTitle>
                </CardHeader>
                <CardContent>
                  <SelectedServicesSummary
                    services={vendor.services}
                    selectedServices={selectedServices}
                    totalPrice={totalPrice}
                  />
                  <div className="mt-6 space-y-4">
                    <Button
                      onClick={handleProceedToBook}
                      className="w-full"
                      disabled={selectedServices.length === 0}
                    >
                      Book Now
                    </Button>
                    <Button
                      variant="outline"
                      onClick={handleToggleFavorite}
                      className="w-full"
                    >
                      {isFavorite ? (
                        <span className="flex items-center gap-2">
                          <Heart className="h-4 w-4 fill-current" />
                          Remove from Favorites
                        </span>
                      ) : (
                        <span className="flex items-center gap-2">
                          <Heart className="h-4 w-4" />
                          Add to Favorites
                        </span>
                      )}
                    </Button>
                  </div>
                </CardContent>
              </Card>
              {/* Badges */}
              <div className="flex flex-wrap gap-2">
                <Badge variant="secondary">
                  <Star className="h-4 w-4 mr-1" />
                  Top Rated
                </Badge>
                <Badge variant="secondary">Verified</Badge>
                <Badge variant="secondary">Premium Vendor</Badge>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Service Booking Dialog */}
      <ServiceBooking
        open={showBooking}
        onClose={() => setShowBooking(false)}
        vendor={vendor}
        selectedServices={selectedServices}
        totalPrice={totalPrice}
      />
      {/* Payment Dialog */}
      {showPayment && bookingData && (
        <Dialog open={showPayment} onOpenChange={setShowPayment}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Complete Payment</DialogTitle>
              <DialogDescription>
                Please complete your payment to confirm your booking.
              </DialogDescription>
            </DialogHeader>
            <PaymentGateway
              amount={bookingData.amount}
              onSuccess={handlePaymentSuccess}
              onCancel={handlePaymentCancel}
            />
          </DialogContent>
        </Dialog>
      )}
    </div>
  )
} 